int estado = 0;

void ini_patas (){
        servo_ctrl.move_servo(PIN_SERVO1,a1);
        servo_ctrl.move_servo(PIN_SERVO2,a2 + ep2);
        servo_ctrl.move_servo(PIN_SERVO3,a3 + ep3);
        servo_ctrl.move_servo(PIN_SERVO4,a4 + ep4);
        servo_ctrl.move_servo(PIN_SERVO5,a5 + ep5);
        servo_ctrl.move_servo(PIN_SERVO6,a6 + ep6);
        servo_ctrl.move_servo(PIN_SERVO7,a7 + ep7);
        servo_ctrl.move_servo(PIN_SERVO8,a8 + ep8);
}

void Avanzar_v2(){
   
  switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 1;
    break;
  case 1:
    estado = 2;
    break;
  case 2:
    estado = 3;
    break;
  case 3:
    estado = 4;
    break;
  case 4:
    estado = 1;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 0;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;

  case 1:
      servo_ctrl.move_servo(PIN_SERVO1, a1 + movp);
      servo_ctrl.move_servo(PIN_SERVO5, a5 + movp);
      servo_ctrl.move_servo(PIN_SERVO2, a2 + movp);
      servo_ctrl.move_servo(PIN_SERVO6, a6 - movm );
      servo_ctrl.move_servo(PIN_SERVO4, a4 + movp);
      servo_ctrl.move_servo(PIN_SERVO8, a8 - movm);
      retardo(100);
    break;
    
  case 2:
      servo_ctrl.move_servo(PIN_SERVO1, a1);
      servo_ctrl.move_servo(PIN_SERVO5, a5);
      retardo(100);
    break;
    
  case 3:
      servo_ctrl.move_servo(PIN_SERVO3, a3 - movp);
      servo_ctrl.move_servo(PIN_SERVO7, a7 - movp);
      servo_ctrl.move_servo(PIN_SERVO4, a4 - movp);
      servo_ctrl.move_servo(PIN_SERVO8, a8 + movm);
      servo_ctrl.move_servo(PIN_SERVO2, a2 - movp);
      servo_ctrl.move_servo(PIN_SERVO6, a6 + movm);
      retardo(100);
    break;
  case 4:
      servo_ctrl.move_servo(PIN_SERVO3, a3);
      servo_ctrl.move_servo(PIN_SERVO7, a7);
      retardo(100);
    break;
  }
}

void Retroceder(){
  switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 6;
    break;
  case 5:
    estado = 6;
    break;
  case 6:
    estado = 7;
    break;
  case 7:
    estado = 8;
    break;
  case 8:
    estado = 5;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 0;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;

  case 5:
      servo_ctrl.move_servo(PIN_SERVO1, a1 + movp);
      servo_ctrl.move_servo(PIN_SERVO5, a5 + movp);
      servo_ctrl.move_servo(PIN_SERVO2, a2 - movp);
      servo_ctrl.move_servo(PIN_SERVO6, a6 + movm );
      servo_ctrl.move_servo(PIN_SERVO4, a4 - movp);
      servo_ctrl.move_servo(PIN_SERVO8, a8 + movm);
      retardo(100);
    break;
    
  case 6:
      servo_ctrl.move_servo(PIN_SERVO1, a1);
      servo_ctrl.move_servo(PIN_SERVO5, a5);
      retardo(100);
    break;
    
  case 7:
      servo_ctrl.move_servo(PIN_SERVO3, a3 - movp);
      servo_ctrl.move_servo(PIN_SERVO7, a7 - movp);
      servo_ctrl.move_servo(PIN_SERVO4, a4 + movp);
      servo_ctrl.move_servo(PIN_SERVO8, a8 - movm);
      servo_ctrl.move_servo(PIN_SERVO2, a2 + movp);
      servo_ctrl.move_servo(PIN_SERVO6, a6 - movm);
      retardo(100);
    break;
  case 8:
      servo_ctrl.move_servo(PIN_SERVO3, a3);
      servo_ctrl.move_servo(PIN_SERVO7, a7);
      retardo(100);
    break;
  }  
}

void Saludar(){
  switch(estado){
    case 0:
        estado = 23;
      break;
    case 23:
        estado = 24;
      break;
      case 24:
        estado = 25;
      break;
    case 25:
        estado = 24;
      break;
    default:
        estado = 0;
  }
switch (estado) {
  case 0:
      ini_patas;
     break;
  case 23 :
      servo_ctrl.move_servo(PIN_SERVO4, 20);
      servo_ctrl.move_servo(PIN_SERVO8, 90);
      servo_ctrl.move_servo(PIN_SERVO1, 170);
      servo_ctrl.move_servo(PIN_SERVO2, 120);
      retardo(100);
    break;
  case 24 :
      servo_ctrl.move_servo(PIN_SERVO2,170);
      servo_ctrl.move_servo(PIN_SERVO1, 170);
      retardo(100);
    break;
  case 25 :
      servo_ctrl.move_servo(PIN_SERVO2,120);
      retardo(100);
    break; 
  
    }
}

void RotacionH() {
 switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 10;
    break;
  case 9:
    estado = 10;
    break;
  case 10:
    estado = 11;
    break;
  case 11:
    estado = 12;
    break;
  case 12:
    estado = 9;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 0;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;

  case 9:
     servo_ctrl.move_servo(PIN_SERVO3, a3 - 2*movp);
     servo_ctrl.move_servo(PIN_SERVO7, a7 - 2*movp); // dos poreso
     servo_ctrl.move_servo(PIN_SERVO4, a4);
     servo_ctrl.move_servo(PIN_SERVO8, a8);
     servo_ctrl.move_servo(PIN_SERVO2, a2 + 2*rot);
     servo_ctrl.move_servo(PIN_SERVO6, a6 + 2*rot);
     retardo(100); 
    break;
    
  case 10:
     servo_ctrl.move_servo(PIN_SERVO3, a3);
     servo_ctrl.move_servo(PIN_SERVO7, a7);
     retardo(100);
    break;
    
  case 11:
     servo_ctrl.move_servo(PIN_SERVO1, a1 + 2*movp);
     servo_ctrl.move_servo(PIN_SERVO5, a5 + 2*movp);
     servo_ctrl.move_servo(PIN_SERVO2, a2);
     servo_ctrl.move_servo(PIN_SERVO6, a6);
     servo_ctrl.move_servo(PIN_SERVO4, a4 + 2*rot);
     servo_ctrl.move_servo(PIN_SERVO8, a8 + 2*rot);
     retardo(100); 
    break;
  case 12:
     servo_ctrl.move_servo(PIN_SERVO1, a1);
     servo_ctrl.move_servo(PIN_SERVO5, a5);
     retardo(100); 
    break;
  }
}

void Uykieto() {
  switch (estado) {
    case 25:
        estado = 25;
      break;
    default: 
        estado = 25;
  }
  switch (estado) {
    case 25:
        servo_ctrl.move_servo(PIN_SERVO9, 90);
      break;
  }
  
}

void RotacionA() {
 switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 14;
    break;
  case 13:
    estado = 14;
    break;
  case 14:
    estado = 15;
    break;
  case 15:
    estado = 16;
    break;
  case 16:
    estado = 13;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 0;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;

  case 13:
     servo_ctrl.move_servo(PIN_SERVO3, a3 - 2*movp);
     servo_ctrl.move_servo(PIN_SERVO7, a7 - 2*movp); // dos poreso
     servo_ctrl.move_servo(PIN_SERVO4, a4);
     servo_ctrl.move_servo(PIN_SERVO8, a8);
     servo_ctrl.move_servo(PIN_SERVO2, a2 - 2*rot);
     servo_ctrl.move_servo(PIN_SERVO6, a6 - 2*rot);
     retardo(100); 
    break;
    
  case 14:
     servo_ctrl.move_servo(PIN_SERVO3, a3);
     servo_ctrl.move_servo(PIN_SERVO7, a7);
     retardo(100);
    break;
    
  case 15:
     servo_ctrl.move_servo(PIN_SERVO1, a1 + 2*movp);
     servo_ctrl.move_servo(PIN_SERVO5, a5 + 2*movp);
     servo_ctrl.move_servo(PIN_SERVO2, a2);
     servo_ctrl.move_servo(PIN_SERVO6, a6);
     servo_ctrl.move_servo(PIN_SERVO4, a4 - 2*rot);
     servo_ctrl.move_servo(PIN_SERVO8, a8 - 2*rot);
     retardo(100); 
    break;
  case 16:
     servo_ctrl.move_servo(PIN_SERVO1, a1);
     servo_ctrl.move_servo(PIN_SERVO5, a5);
     retardo(100); 
    break;
  }
}

void Enojao() {
  switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 17;
    break;
  case 17:
    estado = 18;
    break;
  case 18:
    estado = 19;
    break;
  case 19:
    estado = 20;
    break;
  case 20:
    estado = 17;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 17;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;

  case 17:
      servo_ctrl.move_servo(PIN_SERVO2, 170);
      servo_ctrl.move_servo(PIN_SERVO4, 10);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, a1);
      servo_ctrl.move_servo(PIN_SERVO3, a3);
      retardo(100);
    break;
    
  case 18:
      servo_ctrl.move_servo(PIN_SERVO1, 150);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, 70);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, 150);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, 70);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, 150);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, 70);
      retardo(100);
    break;
    
  case 19:
      servo_ctrl.move_servo(PIN_SERVO2, 170);
      servo_ctrl.move_servo(PIN_SERVO4, 10);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO1, a1);
      servo_ctrl.move_servo(PIN_SERVO3, a3);
      retardo(100);
    break;
  case 20:
      servo_ctrl.move_servo(PIN_SERVO3, 30);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO3, 110);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO3, 30);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO3, 110);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO3, 30);
      retardo(100);
      servo_ctrl.move_servo(PIN_SERVO3, 110);
      retardo(100);
    break;
  }
}

void Bailecito() {
  switch (estado){ // Este switch es solo para el próximo estado
  case 0:
    estado = 22;
    break;
  case 21:
    estado = 22;
    break;
  case 22:
    estado = 21;
    break;
  default: // Si surgen otros estados no considerados…..
    estado = 0;
    break;
  }
  switch (estado){
  case 0:
      ini_patas();
      break;
  case 21:
    //"baila"
    servo_ctrl.move_servo(PIN_SERVO5, 10);
    servo_ctrl.move_servo(PIN_SERVO7, 130);
    retardo(200);
    break;
    
  case 22:
    servo_ctrl.move_servo(PIN_SERVO5, 50);
    servo_ctrl.move_servo(PIN_SERVO7, 170);
    retardo(200);
    break;
  }
}
 

void Estirar() {
  servo_ctrl.move_servo(PIN_SERVO1,90 + ep1);
  servo_ctrl.move_servo(PIN_SERVO2,90 + ep2);
  servo_ctrl.move_servo(PIN_SERVO3,90 + ep3);
  servo_ctrl.move_servo(PIN_SERVO4,90 + ep4);
  servo_ctrl.move_servo(PIN_SERVO5,90 + ep5);
  servo_ctrl.move_servo(PIN_SERVO6,90 + ep6);
  servo_ctrl.move_servo(PIN_SERVO7,90 + ep7);
  servo_ctrl.move_servo(PIN_SERVO8,90 + ep8);
  retardo(200);
}